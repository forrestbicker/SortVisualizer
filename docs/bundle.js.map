{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/framework/ASorter.ts","webpack:///./src/Utility/Config.ts","webpack:///./src/Utility/Util.ts","webpack:///./src/app.ts","webpack:///./src/framework/SortingTask.ts","webpack:///./src/framework/TrackableArray.ts","webpack:///./src/SortingAlgorithms/MergeSort.ts","webpack:///./src/SortingAlgorithms/InsertionSort.ts","webpack:///./src/SortingAlgorithms/HeapSort.ts","webpack:///./src/Utility/TreeUtil.ts","webpack:///./src/framework/ArrayDrawer.ts","webpack:///./src/SortingAlgorithms/SelectionSort.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sortingTask","this","task","execute","randomize","tArr","display","sort","verify","drawer","prev","arr","pushReaderUpdate","Config","colors","barCheckHighlight","getLength","val","barErrorHighlight","ASorter","white","barColor","barSwapHighlight","readerColor","textColor","UpdateType","COUNTER","POSITION","READER","COLOR","copyOf","out","push","subarray","start","end","max","length","Util","sorts","mergeSort","MergeSort","insertionSort","InsertionSort","heapSort","HeapSort","selectionSort","SelectionSort","htmlString","sortName","dropdown","document","getElementById","innerHTML","addEventListener","ArrayDrawer","selectedSort","SortingTask","array","setPrimaryArrayLength","TrackableArray","auxiliaryArrs","Array","generateNewAuxArr","getData","cutoff","randIx","Math","trunc","random","temp","isAux","acsesses","modifications","ix","pushCounterUpdate","set","pushPositionUpdate","pop","swap","a","b","pushColorUpdate","aVal","bVal","setCounter","setPositions","toString","String","mid","merge","left","right","k","leftValue","rightValue","j","floor","maxHeapify","root","largest","TreeUtil","getLeftChildIx","getRightChildIx","getRoot","getParrentIx","counterCanvas","posCanvas","readerCanvas","currentLength","currentMax","canvasWidth","canvasHeight","cWidthUnit","cHeightUnit","READER_HEIGHT","lastRead","updateStack","resizeCanvas","width","height","setAttribute","newInnerHTML","Number","getAttribute","setColor","color","children","setReader","highlightColor","permaBeacon","xOffset","type","index","newColor","delay","len","setTimeout","displayNext","update","shift","undefined","ixMin","min"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { SortingTask } from \"./SortingTask\";\nimport { Config } from \"../Utility/Config\";\n\nexport abstract class ASorter {\n    task: SortingTask;\n\n    constructor(sortingTask: SortingTask) {\n        this.task = sortingTask;\n    }\n\n    abstract sort(): SortingTask;\n\n    execute(): void {\n        this.task.randomize();\n        this.task.tArr.display()\n        this.sort();\n        this.verify();\n        this.task.drawer.display(15);\n    }\n\n    verify(): boolean {\n        let prev: number = this.task.tArr.arr[0];\n        this.task.drawer.pushReaderUpdate(0, Config.colors.barCheckHighlight, true)\n        for (var i = 1; i < this.task.tArr.getLength(); i++) {\n            let val: number = this.task.tArr.arr[i];\n            if (prev <= val) {\n                this.task.drawer.pushReaderUpdate(i, Config.colors.barCheckHighlight, true) // display effect of moving head without modifying counters\n            } else {\n                this.task.drawer.pushReaderUpdate(i, Config.colors.barErrorHighlight, true)\n                return false\n            }\n            prev = val;\n        }\n        return true\n    }\n}\n\n","export class Config {\n    static white: string = \"#E2E8F0\";\n\n    static colors: any = {\n        barColor: Config.white, // default color for array element repersentations\n        barSwapHighlight: \"#FEB2B2\", // hightlight color durring element swaps\n        barCheckHighlight: \"#9AE6B4\", // highlight color for correctly placed element\n        barErrorHighlight: \"#FEB2B2\", // highlight color for incorrectly placed element\n\n        readerColor: \"#90cdf4\",\n\n        textColor: Config.white,\n    };\n}","export const UpdateType = {\n    COUNTER: 0,\n    POSITION: 1,\n    READER: 2,\n    COLOR: 3,\n}\nexport class Util {\n\n\n    static copyOf(arr: number[]): number[] {\n        let out: number[] = [];\n        for (const n of arr) {\n            out.push(n);\n        }\n        return out;\n    }\n\n    static subarray(arr: number[], start: number, end: number) {\n        let out: number[] = [];\n        for (var i = start; i <= end; i++) {\n            out.push(arr[i]);\n        }\n        return out;\n    }\n\n    static max(arr: number[]): number {\n        let max: number = arr[0];\n        for (var i = 0; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    }\n}","import { SortingTask } from \"./framework/SortingTask\";\nimport { ASorter } from \"./framework/ASorter\";\nimport { MergeSort } from \"./SortingAlgorithms/MergeSort\";\nimport { InsertionSort } from \"./SortingAlgorithms/InsertionSort\";\nimport { HeapSort } from \"./SortingAlgorithms/HeapSort\";\nimport { ArrayDrawer } from \"./framework/ArrayDrawer\";\nimport { SelectionSort } from \"./SortingAlgorithms/SelectionSort\";\n\nvar sorts: { [id: string]: any } = {\n    mergeSort: function (sortingTask: SortingTask): MergeSort {\n        return new MergeSort(sortingTask);\n    },\n    insertionSort: function (sortingTask: SortingTask): InsertionSort {\n        return new InsertionSort(sortingTask);\n    },\n    heapSort: function (sortingTask: SortingTask): HeapSort {\n        return new HeapSort(sortingTask);\n    },\n    selectionSort: function (sortingTask: SortingTask): SelectionSort {\n        return new SelectionSort(sortingTask);\n    }\n};\n\nlet htmlString: string = \"\";\nfor (const sortName in sorts) {\n    htmlString += `<option value='${sortName}'>${sortName}</option>`;\n}\n\nlet dropdown: HTMLSelectElement = document.getElementById(\n    \"algoSelect\"\n)! as HTMLSelectElement;\ndropdown.innerHTML = htmlString;\n\ndocument.getElementById(\"startButton\")!.addEventListener(\"click\", runSort);\n\nfunction runSort(): void {\n    // create arr\n    var arr: Array<number> = [];\n    for (var i = 1; i <= 32; i++) {\n        arr.push(i);\n    }\n    \n    // build drawer\n    let drawer = new ArrayDrawer(\n        document.getElementById(\"counter\")!,\n        document.getElementById(\"position\")!,\n        document.getElementById(\"reader\")!,\n    );\n\n    let selectedSort: string = dropdown.value;\n    var s: ASorter = sorts[selectedSort](new SortingTask(arr, drawer)); // TODO: make a register, on click cancel the sort\n    s.execute();\n}\n\n// // docum\n// //\n// // document!.getElementById('root')!.textContent = \"hello\"\n\n// // var sorts = {\n// //     mergeSort: function (sortingTask): SortingTask {\n// //         sortingTask.aux.r = [];\n// //         sortingTask.aux.l = [];\n\n// //         for (var i = 0; i < sortingTask.arr.length / 2; i++) {\n\n// //         }\n\n// //         return sortingTask;\n// //     },\n// // };\n","import { TrackableArray } from \"./TrackableArray\";\nimport { ArrayDrawer } from \"./ArrayDrawer\";\nimport { Util } from \"../Utility/Util\";\nexport class SortingTask {\n    tArr: TrackableArray;\n    auxiliaryArrs: Array<TrackableArray>;\n    // TODO: add constant space register storage with separate display\n    drawer: ArrayDrawer;\n\n    // swaps: number;\n    // comparisons: number;\n\n    constructor(array: Array<number>, drawer: ArrayDrawer) {\n        this.drawer = drawer;\n        this.drawer.setPrimaryArrayLength(array.length, Util.max(array));\n\n        this.tArr = new TrackableArray(array, this.drawer, false);\n        this.auxiliaryArrs = new Array<TrackableArray>();\n        // this.comparisons = 0;\n\n    }\n\n    generateNewAuxArr(): TrackableArray {\n        this.auxiliaryArrs.push(new TrackableArray([], this.drawer, true));\n        return this.auxiliaryArrs[this.auxiliaryArrs.length - 1];\n    }\n\n    getData(): any { };\n\n    randomize(): void {\n        let cutoff: number = 0;\n\n        while (cutoff < this.tArr.arr.length) {\n            let randIx: number = cutoff + Math.trunc(Math.random() * (this.tArr.arr.length - cutoff));\n            let temp: number = this.tArr.arr[cutoff];\n            this.tArr.arr[cutoff] = this.tArr.arr[randIx];\n            this.tArr.arr[randIx] = temp;\n            cutoff++\n        }\n\n    }\n\n    // updateCanvas(): void {\n    //     // this.canvas.innerHTML = \"\";\n    //     // this.updatePositions();\n    //     // this.updateCounters();\n    //     this.canvas.innerHTML += \".\\n\"\n    // }\n\n    // updateCounters(): void {\n\n    //     let auxAcsesses: number = 0;\n    //     let auxModifications: number = 0;\n\n    //     for (const arr of this.auxiliaryArrs) {\n    //         auxAcsesses += arr.acsesses;\n    //         auxModifications += arr.modifications;\n    //     }\n\n    //     this.canvas.innerHTML += `<text x=\"20\" y=\"35\">\n    //     Acsesses     : ${this.tArr.acsesses}\n    //     Modifications: ${this.tArr.modifications}\n    //     Aux Acs's    : ${auxAcsesses}\n    //     Aux Mod's    : ${auxModifications}  \n    //     </text>`\n    // };\n\n    // updatePositions(): void {\n    //     for (var i = 0; i < this.tArr.arr.length; i++) {\n    //         let height: number = this.tArr.arr[i] * this.cHeightUnit;\n    //         this.canvas.innerHTML += `<rect\n    //         width=\"${this.cWidthUnit}\"\n    //         height=\"${height}\"\n    //         x=\"${i * this.cWidthUnit}\"\n    //         y=\"${Number(this.canvas.getAttribute(\"height\")) - height}\"></rect>`;\n    //     }\n\n    // };\n}","import { ArrayDrawer } from \"./ArrayDrawer\";\nimport { Config } from \"../Utility/Config\";\n\nexport class TrackableArray { // todo: make extend Array<number>, MAYBE THATS NOT DESIRABLE because then u have easy acsess to methods that wll not incements counters when called  \n\n    arr: Array<number>;\n    acsesses: number;\n    modifications: number;\n    drawer: ArrayDrawer;\n    isAux: boolean; // aux arrs are NOT drawable, primary arrs are, only one drawable arr should be active at a time\n\n    constructor(array: Array<number>, drawer: ArrayDrawer, isAux: boolean) {\n        this.arr = array;\n        this.acsesses = 0;\n        this.modifications = 0;\n\n\n        this.isAux = isAux;\n\n        this.drawer = drawer;\n    }\n\n    get(ix: number): number {\n        this.acsesses++;\n\n        this.drawer.pushCounterUpdate(this);\n        if (!this.isAux) {\n            this.drawer.pushReaderUpdate(ix)\n        }\n\n        return this.arr[ix];\n    }\n\n    set(ix: number, value: number): void {\n        this.arr[ix] = value;\n\n        this.modifications++;\n        this.drawer.pushCounterUpdate(this);\n        this.drawer.pushPositionUpdate(this);\n    }\n\n    push(value: number): void {\n        this.arr.push(value);\n\n        this.modifications++;\n        this.drawer.pushCounterUpdate(this);\n        this.drawer.pushPositionUpdate(this);\n    }\n\n    // remove(ix: number): void {\n    //     this.arr.\n    // }\n\n    pop(): void {\n        this.arr.pop();\n\n        this.modifications++;\n        this.drawer.pushPositionUpdate(this);\n    }\n\n    swap(a: number, b: number): void { // added layer of abstraction above normal functions\n        this.drawer.pushColorUpdate(a, Config.colors.barSwapHighlight)\n        this.drawer.pushColorUpdate(b, Config.colors.barSwapHighlight)\n\n        let aVal = this.get(a);\n        let bVal = this.get(b);\n        this.set(a, bVal);\n        this.set(b, aVal); // TODO: express tmp as an aux arr (or add a O(1) register) for const space tracking\n        \n        this.drawer.pushColorUpdate(a, Config.colors.barColor)\n        this.drawer.pushColorUpdate(b, Config.colors.barColor)\n\n    }\n\n    getLength(): number {\n        return this.arr.length;\n    }\n\n    display(): void {\n        this.drawer.setCounter(this.acsesses, this.modifications);\n        this.drawer.setPositions(this.arr);\n    }\n\n    toString(): String {\n        let out: String = \"[\";\n        out += String(this.arr[0]);\n        for (var i = 1; i < this.arr.length; i++) {\n            out += \", \";\n            out += String(i);\n        }\n        out += \"]\";\n        return out;\n    }\n}","import { ASorter } from \"../framework/ASorter\";\nimport { TrackableArray } from \"../framework/TrackableArray\";\nimport { SortingTask } from \"../framework/SortingTask\"\nimport { Util } from \"../Utility/Util\";\n\nexport class MergeSort extends ASorter {\n    sort(): SortingTask {\n        this.mergeSort(0, this.task.tArr.getLength() - 1);\n        return this.task;\n    }\n\n    mergeSort(start: number, end: number): void { // returns array of indicies\n        if (start < end) {\n            let mid: number = Math.trunc((start + end) / 2);\n\n            this.mergeSort(start, mid);\n            this.mergeSort(mid + 1, end);\n\n            this.merge(start, mid, end);\n        }\n    }\n\n    merge(start: number, mid: number, end: number): void {\n\n        // allocate memory to array coppies\n        let left: TrackableArray = this.task.generateNewAuxArr();\n        let right: TrackableArray = this.task.generateNewAuxArr();\n\n        // populate coppies\n        for (var i: number = start; i <= mid; i++) {\n            left.push(this.task.tArr.get(i));\n        }\n\n        for (var i: number = mid + 1; i <= end; i++) {\n            right.push(this.task.tArr.get(i));\n        }\n\n        // crawlers\n        let l: number = 0; // left goes up to and including mid\n        let r: number = 0; // right is everything right of mid\n        let k: number = start; // insertion point to main array\n\n        while (l + start <= mid && r + mid + 1 <= end) {\n            let leftValue: number = left.get(l);\n            let rightValue: number = right.get(r);\n            if (leftValue <= rightValue) {\n                this.task.tArr.set(k, leftValue);\n                l++;\n            } else {\n                this.task.tArr.set(k, rightValue);\n                r++;\n            }\n            k++;\n        }\n\n        while (l + start <= mid) {\n            this.task.tArr.set(k, left.get(l));\n            l++;\n            k++;\n        }\n\n        while (r + mid + 1 <= end) {\n            this.task.tArr.set(k, right.get(r));\n            r++;\n            k++;\n        }\n    }\n\n}","import { ASorter } from \"../framework/ASorter\";\nimport { SortingTask } from \"../framework/SortingTask\"\n\n// n^2\nexport class InsertionSort extends ASorter {\n    sort(): SortingTask {\n        for (var i = 1; i < this.task.tArr.getLength(); i++) {\n            let key = this.task.tArr.get(i);\n            let j = i - 1;\n            while (j >= 0 && key < this.task.tArr.get(j)) {\n                this.task.tArr.set(j + 1, this.task.tArr.get(j));\n                j--;\n            }\n            this.task.tArr.set(j + 1, key);\n        }\n        return this.task;\n    }\n    \n}","import { ASorter } from \"../framework/ASorter\";\nimport { TreeUtil } from \"../Utility/TreeUtil\";\nimport { TrackableArray } from \"../framework/TrackableArray\";\nimport { SortingTask } from \"../framework/SortingTask\"\n\nexport class HeapSort extends ASorter {\n    sort(): SortingTask {\n        let n: number = this.task.tArr.getLength()\n\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n            this.maxHeapify(i, n);\n        }\n\n        for (let i = n - 1; i > 0; i--) {\n            this.task.tArr.swap(0, i)\n            this.maxHeapify(0, i)\n        }\n\n        return this.task;\n    }\n\n    maxHeapify(root: number, end: number): void {\n        let largest = root;\n        let left = TreeUtil.getLeftChildIx(root);\n        let right = TreeUtil.getRightChildIx(root);\n\n        // if left child exists and is greater than root\n        if (left < end && this.task.tArr.get(largest) < this.task.tArr.get(left)) {\n            largest = left;\n        }\n\n        if (right < end && this.task.tArr.get(largest) < this.task.tArr.get(right)) {\n            largest = right;\n        }\n\n        if (largest != root) {\n            this.task.tArr.swap(largest, root)\n            this.maxHeapify(largest, end);\n        }\n    }\n}","import { TrackableArray } from \"../framework/TrackableArray\";\n\nexport class TreeUtil {\n\n    static getRoot(arr: TrackableArray): number {\n        return arr.get(0);\n    }\n\n    static getLeftChildIx(ix: number) {\n        return ix * 2;\n    }\n\n    static getRightChildIx(ix: number) {\n        return ix * 2 + 1;\n    }\n\n    static getParrentIx(ix: number) {\n        return Math.floor(ix / 2 - 1);\n    }\n}","import { TrackableArray } from \"./TrackableArray\";\nimport { Util, UpdateType } from \"../Utility/Util\";\nimport { Config } from \"../Utility/Config\";\nexport class ArrayDrawer { // TODO: each sorting tash should have an array drawer that is passed down and can tell aux from primary on method call\n\n    counterCanvas: Element;\n    posCanvas: Element;\n    readerCanvas: Element;\n\n    currentLength: number = 0;\n    currentMax: number = 0;\n\n    canvasWidth: number = 0;\n    canvasHeight: number = 0;\n\n    cWidthUnit: number = 0;\n    cHeightUnit: number = 0;\n\n    updateStack: any[];\n\n    READER_HEIGHT: number = 15;\n\n    lastRead: number = 0;\n\n\n    constructor(counterCanvas: HTMLElement, posCanvas: HTMLElement, readerCanvas: HTMLElement) {\n        this.counterCanvas = counterCanvas;\n        this.posCanvas = posCanvas;\n        this.readerCanvas = readerCanvas;\n\n        this.updateStack = [];\n\n        this.resizeCanvas(500, 500);\n    }\n\n    resizeCanvas(width: number, height: number): void {\n        this.canvasWidth = width;\n        this.canvasHeight = height;\n\n        this.posCanvas.setAttribute(\"width\", String(this.canvasWidth));\n        this.posCanvas.setAttribute(\"height\", String(this.canvasHeight));\n        this.counterCanvas.setAttribute(\"width\", String(this.canvasWidth));\n        this.readerCanvas.setAttribute(\"width\", String(this.canvasWidth));\n        this.readerCanvas.setAttribute(\"height\", String(this.READER_HEIGHT));\n\n        this.setPrimaryArrayLength(this.currentLength, this.currentMax);\n    }\n\n    setPrimaryArrayLength(length: number, max: number): void {\n        this.currentLength = length;\n        this.cWidthUnit = Math.floor(1.0 * this.canvasWidth / length); // assumes len = max - 1 (true if is consecuitive range of ints)\n        this.cHeightUnit = Math.floor(1.0 * this.canvasHeight / max); // \n    }\n\n\n    setCounter(acsesses: number, modifications: number): void {\n        this.counterCanvas.innerHTML = `\n        <text x=\"20\" y=\"35\" style=\"color:${Config.colors.textColor}\">\n        Acsesses     : ${acsesses}\n        <br>\n        Modifications: ${modifications}\n        </text>`\n\n    }\n\n    setPositions(arr: number[]): void { // todo: fix all array<number> to number<> and the likes\n        let newInnerHTML: string = \"\"\n        let canvasHeight: number = Number(this.posCanvas.getAttribute(\"height\"));\n        for (var i = 0; i < arr.length; i++) {\n            let height: number = arr[i] * this.cHeightUnit;\n            newInnerHTML += `\n                <rect\n                width=\"${this.cWidthUnit}\"\n                height=\"${height}\"\n                x=\"${i * this.cWidthUnit}\"\n                y=\"${canvasHeight - height}\"\n                style=\"fill: ${Config.colors.barColor}\">\n                </rect>`;\n        }\n        this.posCanvas.innerHTML = newInnerHTML;\n    }\n\n    setColor(ix: number, color: String): void {\n        let x = this.posCanvas.children[ix];\n        x.setAttribute(\"style\", `fill:${color}`);\n    }\n\n    setReader(ix: number, highlightColor?: string, permaBeacon?: boolean): void {\n        // default values for optional params\n        if (typeof highlightColor == \"undefined\") {\n            highlightColor = Config.colors.readerColor\n        }\n\n        if (typeof permaBeacon == \"undefined\") {\n            permaBeacon = false;\n        }\n\n        if (!permaBeacon) {\n            // clear last color modification\n            this.setColor(this.lastRead, Config.colors.barColor);\n        }\n\n        let height = this.READER_HEIGHT;\n        let width = this.cWidthUnit;\n        let xOffset: number = ix * width;\n\n        // bottom left, top mid, bottom right\n        this.readerCanvas.innerHTML = `<polygon\n        points='\n            ${xOffset},${height}\n            ${xOffset + width / 2},0\n            ${xOffset + width},${height}'\n        style=\"fill: ${highlightColor!}\"\n        ></polygon>`;\n\n        this.setColor(ix, highlightColor!);\n        this.lastRead = ix;\n    }\n\n    // TODO: setSwap\n\n    pushCounterUpdate(tArr: TrackableArray): void {\n        this.updateStack.push({\n            type: UpdateType.COUNTER,\n            isAux: tArr.isAux,\n            acsesses: tArr.acsesses,\n            modifications: tArr.modifications\n        });\n    };\n\n    pushPositionUpdate(tArr: TrackableArray): void {\n        if (!tArr.isAux) {\n            this.updateStack.push({\n                type: UpdateType.POSITION,\n                arr: Util.copyOf(tArr.arr)\n            });\n        }\n    };\n\n    pushReaderUpdate(ix: number, highlightColor?: string, permaBeacon?: boolean): void {\n        this.updateStack.push({\n            type: UpdateType.READER,\n            index: ix,\n            highlightColor: highlightColor,\n            permaBeacon: permaBeacon,\n        })\n    }\n\n    pushColorUpdate(ix: number, color: String): void {\n        this.updateStack.push({\n            type: UpdateType.COLOR,\n            index: ix,\n            newColor: color\n        })\n    }\n\n\n    display(delay: number): void {\n        let len: number = this.updateStack.length;\n        for (var i = 0; i < len; i++) {\n            setTimeout(() => { this.displayNext() }, i * delay);\n        }\n    }\n\n    displayNext(): void {\n        let update = this.updateStack.shift(); // FIFO queue\n        if (update != undefined) {\n            switch (update.type) { // TODO: doing this as dicts works okay but would be better to do as some type of custom object\n                case UpdateType.COUNTER:\n                    if (update.isAux) { // if is is an aux arr\n                        // this.setCounter(0, 0);\n                    } else {\n                        this.setCounter(update.acsesses, update.modifications);\n                    }\n                    break;\n\n                case UpdateType.POSITION:\n                    this.setPositions(update.arr);\n                    break;\n\n                case UpdateType.READER:\n                    this.setReader(update.index, update.highlightColor, update.permaBeacon);\n                    break;\n\n                case UpdateType.COLOR:\n                    this.setColor(update.index, update.newColor);\n                    break;\n            }\n        }\n    }\n}","import { ASorter } from \"../framework/ASorter\";\nimport { SortingTask } from \"../framework/SortingTask\"\n\n// n^2\nexport class SelectionSort extends ASorter {\n    sort(): SortingTask {\n        for (var cutoff = 0; cutoff < this.task.tArr.getLength(); cutoff++) {\n            let ixMin = cutoff;\n            let min = this.task.tArr.get(cutoff);\n            for (var i = cutoff; i < this.task.tArr.getLength(); i++) {\n                let val: number = this.task.tArr.get(i);\n                if (val < min) {\n                    ixMin = i;\n                    min = val;\n                }\n            }\n            this.task.tArr.swap(ixMin, cutoff);\n        }\n        return this.task;\n    }\n\n}"],"sourceRoot":""}