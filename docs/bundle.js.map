{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/framework/ASorter.ts","webpack:///./src/Utility/Config.ts","webpack:///./src/Utility/Util.ts","webpack:///./src/app.ts","webpack:///./src/framework/SortingTask.ts","webpack:///./src/framework/TrackableArray.ts","webpack:///./src/SortingAlgorithms/MergeSort.ts","webpack:///./src/SortingAlgorithms/InsertionSort.ts","webpack:///./src/SortingAlgorithms/BinaryInsertionSort.ts","webpack:///./src/SortingAlgorithms/HeapSort.ts","webpack:///./src/Utility/TreeUtil.ts","webpack:///./src/framework/ArrayDrawer.ts","webpack:///./src/SortingAlgorithms/SelectionSort.ts","webpack:///./src/SortingAlgorithms/BubbleSort.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","sortingTask","this","task","swapComplexity","comparisonComplexity","description","execute","tArr","display","resetCounters","sort","verify","drawer","prev","arr","pushReaderUpdate","Config","colors","barCorrectColor","pushClassUpdate","getLength","val","barIncorrecColor","pushBuffer","barCheckHighlight","swap","a","b","compare","set","ix","ASorter","init","document","documentElement","style","setProperty","textColor","barDefaultColor","barSwapColor","barCompareColor","white","barSetColor","barGetColor","readerColor","canvasWidthPercent","canvasHeightPercent","UpdateType","COUNTER","POSITION","READER","COLOR","BUFFER","CLASS","copyOf","out","push","subarray","start","end","max","length","Util","dropdown","swapLegend","sorts","selectionSort","SelectionSort","insertionSort","InsertionSort","binaryInsertionSort","BinaryInsertionSort","heapSort","HeapSort","mergeSort","MergeSort","bubbleSort","BubbleSort","runSort","selectedSort","generateSorter","reverseTask","reverse","randomizeTask","randomize","swapA","innerHTML","setTimeout","swapB","getElementById","setAttribute","htmlString","sortName","ArrayDrawer","SortingTask","addEventListener","array","setArrayData","TrackableArray","auxiliaryArrs","Array","generateNewAuxArr","cutoff","randIx","Math","trunc","random","temp","isAux","acsesses","modifications","comparisons","swaps","pushCounterUpdate","aVal","bVal","pushPositionUpdate","pop","setCounter","setPositions","toString","String","mid","merge","left","right","k","leftValue","rightValue","j","floor","maxHeapify","root","largest","TreeUtil","getLeftChildIx","getRightChildIx","getRoot","getParrentIx","counterCanvas","posCanvas","readerCanvas","delaySlider","currentLength","currentMax","widthUnit","heightUnit","canvasWidth","canvasHeight","READER_HEIGHT","lastRead","updateStack","window","resizeDisplay","clientWidth","clientHeight","newInnerHTML","setColor","color","children","setClass","className","setReader","height","width","xOffset","type","highlightColor","index","pushColorUpdate","newColor","newClassName","displayNext","update","shift","undefined","parseFloat","minIx","sorted","iterations"],"mappings":"aACE,IAAIA,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUC,QAGnC,IAAIC,EAASJ,EAAiBE,GAAY,CACzCG,EAAGH,EACHI,GAAG,EACHH,QAAS,IAUV,OANAI,EAAQL,GAAUM,KAAKJ,EAAOD,QAASC,EAAQA,EAAOD,QAASF,GAG/DG,EAAOE,GAAI,EAGJF,EAAOD,QAKfF,EAAoBQ,EAAIF,EAGxBN,EAAoBS,EAAIV,EAGxBC,EAAoBU,EAAI,SAASR,EAASS,EAAMC,GAC3CZ,EAAoBa,EAAEX,EAASS,IAClCG,OAAOC,eAAeb,EAASS,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEZ,EAAoBkB,EAAI,SAAShB,GACX,oBAAXiB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAeb,EAASiB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAeb,EAAS,aAAc,CAAEmB,OAAO,KAQvDrB,EAAoBsB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQrB,EAAoBqB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFA1B,EAAoBkB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOrB,EAAoBU,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRzB,EAAoB6B,EAAI,SAAS1B,GAChC,IAAIS,EAAST,GAAUA,EAAOqB,WAC7B,WAAwB,OAAOrB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAH,EAAoBU,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRZ,EAAoBa,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG/B,EAAoBkC,EAAI,GAIjBlC,EAAoBA,EAAoBmC,EAAI,G,iGCjFrD,WAEA,aAMC,WAAYC,GACXC,KAAKC,KAAOF,EACZC,KAAKE,eAAiB,GACtBF,KAAKG,qBAAuB,GAC5BH,KAAKI,YAAc,GAsDrB,OAjDQ,YAAAC,QAAP,WACCL,KAAKC,KAAKK,KAAKC,UACfP,KAAKC,KAAKK,KAAKE,gBACfR,KAAKS,OACLT,KAAKU,SACLV,KAAKC,KAAKU,OAAOJ,WAIX,YAAAG,OAAP,WACC,IAAIE,EAAeZ,KAAKC,KAAKK,KAAKO,IAAI,GACtCb,KAAKC,KAAKU,OAAOG,iBAAiB,EAAG,EAAAC,OAAOC,OAAOC,iBACnDjB,KAAKC,KAAKU,OAAOO,gBAAgB,EAAG,WACpC,IAAK,IAAInD,EAAI,EAAGA,EAAIiC,KAAKC,KAAKK,KAAKa,YAAapD,IAAK,CACpD,IAAIqD,EAAcpB,KAAKC,KAAKK,KAAKO,IAAI9C,GACrC,KAAI6C,GAAQQ,GAQX,OAHApB,KAAKC,KAAKU,OAAOG,iBAAiB/C,EAAG,EAAAgD,OAAOC,OAAOK,kBACnDrB,KAAKC,KAAKU,OAAOO,gBAAgBnD,EAAG,aACpCiC,KAAKC,KAAKU,OAAOW,cACV,EAPPtB,KAAKC,KAAKU,OAAOG,iBAAiB/C,EAAG,EAAAgD,OAAOC,OAAOO,mBACnDvB,KAAKC,KAAKU,OAAOO,gBAAgBnD,EAAG,WACpCiC,KAAKC,KAAKU,OAAOW,aAOlBV,EAAOQ,EAER,OAAO,GAGD,YAAAI,KAAP,SAAYC,EAAWC,GACtB1B,KAAKC,KAAKK,KAAKkB,KAAKC,EAAGC,IAGjB,YAAAC,QAAP,SAAeF,EAAWC,GACzB,OAAO1B,KAAKC,KAAKK,KAAKqB,QAAQF,EAAGC,IAG3B,YAAAP,UAAP,WACC,OAAOnB,KAAKC,KAAKK,KAAKa,aAGhB,YAAAS,IAAP,SAAWC,EAAY7C,GACtBgB,KAAKC,KAAKK,KAAKsB,IAAIC,EAAI7C,IAGjB,YAAAJ,IAAP,SAAWiD,GACV,OAAO7B,KAAKC,KAAKK,KAAK1B,IAAIiD,IAE5B,EAhEA,GAAsB,EAAAC,W,8FCHtB,+BA8BA,OAVW,EAAAC,KAAP,WACIC,SAASC,gBAAgBC,MAAMC,YAAY,cAAepB,EAAOC,OAAOoB,WACxEJ,SAASC,gBAAgBC,MAAMC,YAAY,oBAAqBpB,EAAOC,OAAOqB,iBAC9EL,SAASC,gBAAgBC,MAAMC,YAAY,iBAAkBpB,EAAOC,OAAOsB,cAC3EN,SAASC,gBAAgBC,MAAMC,YAAY,oBAAqBpB,EAAOC,OAAOuB,iBAC9EP,SAASC,gBAAgBC,MAAMC,YAAY,gBAAiBpB,EAAOC,OAAOsB,cAC1EN,SAASC,gBAAgBC,MAAMC,YAAY,gBAAiBpB,EAAOC,OAAOuB,iBAC1EP,SAASC,gBAAgBC,MAAMC,YAAY,oBAAqBpB,EAAOC,OAAOC,iBAC9Ee,SAASC,gBAAgBC,MAAMC,YAAY,qBAAsBpB,EAAOC,OAAOK,mBA3BpE,EAAAmB,MAAgB,UAExB,EAAAxB,OAAc,CACjBqB,gBAAiBtB,EAAOyB,MACxBF,aAAc,UACdC,gBAAiB,UACjBE,YAAa,UACbC,YAAa,UACbzB,gBAAiB,UACjBI,iBAAkB,UAElBsB,YAAa,UAEbP,UAAWrB,EAAOyB,OAGf,EAAAI,mBAAqB,GACrB,EAAAC,oBAAsB,GAYjC,EA9BA,GAAa,EAAA9B,U,yGCAA,EAAA+B,WAAa,CACtBC,QAAS,EACTC,SAAU,EACVC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,MAAO,GAEX,+BA4BA,OAzBW,EAAAC,OAAP,SAAcxC,GAEV,IADA,IAAIyC,EAAgB,GACJ,MAAAzC,EAAA,eAAK,CAAhB,IAAMrB,EAAC,KACR8D,EAAIC,KAAK/D,GAEb,OAAO8D,GAGJ,EAAAE,SAAP,SAAgB3C,EAAe4C,EAAeC,GAE1C,IADA,IAAIJ,EAAgB,GACXvF,EAAI0F,EAAO1F,GAAK2F,EAAK3F,IAC1BuF,EAAIC,KAAK1C,EAAI9C,IAEjB,OAAOuF,GAGJ,EAAAK,IAAP,SAAW9C,GAEP,IADA,IAAI8C,EAAc9C,EAAI,GACb9C,EAAI,EAAGA,EAAI8C,EAAI+C,OAAQ7F,IACxB8C,EAAI9C,GAAK4F,IACTA,EAAM9C,EAAI9C,IAGlB,OAAO4F,GAEf,EA5BA,GAAa,EAAAE,Q,8ECRb,IAWIC,EACA7D,EACAU,EACAoD,EAdJ,OAEA,OACA,OACA,OACA,OACA,QACA,QACA,QACA,OAMIC,EAA+B,CAC/BC,cAAe,SAAUlE,GACrB,OAAO,IAAI,EAAAmE,cAAcnE,IAEhCoE,cAAe,SAAUpE,GACxB,OAAO,IAAI,EAAAqE,cAAcrE,IAE1BsE,oBAAqB,SAAUtE,GAC9B,OAAO,IAAI,EAAAuE,oBAAoBvE,IAE7BwE,SAAU,SAAUxE,GAChB,OAAO,IAAI,EAAAyE,SAASzE,IAE3B0E,UAAW,SAAU1E,GACpB,OAAO,IAAI,EAAA2E,UAAU3E,IAEtB4E,WAAY,SAAU5E,GACrB,OAAO,IAAI,EAAA6E,WAAW7E,KAgDxB,SAAS8E,KAcT,SAAwB5E,GACpB,IAAI6E,EAAuBhB,EAAS9E,MAEpC,OADsBgF,EAAMc,GAAc7E,IAf1C8E,CAAe9E,GAAMI,UAGzB,SAAS2E,IACL/E,EAAKgF,UACLhF,EAAKK,KAAKC,UAGd,SAAS2E,IACLjF,EAAKkF,YACLlF,EAAKK,KAAKC,UA4Bd,SAAS6E,IACLrB,EAAWsB,UAAY,4OAEvBC,WAAWC,EAAO,KAGtB,SAASA,IACLxB,EAAWsB,UAAY,4OAEvBC,WAAWF,EAAO,MA5FtB,W,MAEI,EAAArE,OAAOgB,OAC0B,QAAjC,EAAAC,SAASwD,eAAe,iBAAS,SAAEC,aAAa,QAAS,SAAS,IAAM,EAAA1E,OAAO6B,mBAAkB,MAGjG,IAAI8C,EAAqB,GACzB,IAAK,IAAMC,KAAY3B,EACnB0B,GAAc,kBAAkBC,EAAQ,KAAKA,EAAQ,aAEzD7B,EAAW9B,SAASwD,eAChB,eAEKH,UAAYK,EAGrB3B,EAAa/B,SAASwD,eAAe,cACrCJ,IAIA,IADA,IAAIvE,EAAgB,GACX9C,EAAI,EAAGA,GAAK,GAAIA,IACrB8C,EAAI0C,KAAKxF,GAIb4C,EAAS,IAAI,EAAAiF,YACT5D,SAASwD,eAAe,WACxBxD,SAASwD,eAAe,YACxBxD,SAASwD,eAAe,UACvBxD,SAASwD,eAAe,iBAG7BvF,EAAO,IAAI,EAAA4F,YAAYhF,EAAKF,IACvBwE,YACLlF,EAAKK,KAAKC,UAGVyB,SAASwD,eAAe,eAAgBM,iBAAiB,QAASjB,GAClE7C,SAASwD,eAAe,mBAAoBM,iBAAiB,QAASZ,GACtElD,SAASwD,eAAe,iBAAkBM,iBAAiB,QAASd,GAwBxEjD,I,mGCpGA,WAEA,OACA,aASI,WAAYgE,EAAsBpF,GAC9BX,KAAKW,OAASA,EACdX,KAAKW,OAAOqF,aAAaD,EAAMnC,OAAQ,EAAAC,KAAKF,IAAIoC,IAEhD/F,KAAKM,KAAO,IAAI,EAAA2F,eAAeF,EAAO/F,KAAKW,QAAQ,GACnDX,KAAKkG,cAAgB,IAAIC,MAiEjC,OA9DW,YAAAC,kBAAP,WAEI,OADApG,KAAKkG,cAAc3C,KAAK,IAAI,EAAA0C,eAAe,GAAIjG,KAAKW,QAAQ,IACrDX,KAAKkG,cAAclG,KAAKkG,cAActC,OAAS,IAMnD,YAAAuB,UAAP,WAGI,IAFA,IAAIkB,EAAiB,EAEdA,EAASrG,KAAKM,KAAKO,IAAI+C,QAAQ,CAClC,IAAI0C,EAAiBD,EAASE,KAAKC,MAAMD,KAAKE,UAAYzG,KAAKM,KAAKO,IAAI+C,OAASyC,IAC7EK,EAAe1G,KAAKM,KAAKO,IAAIwF,GACjCrG,KAAKM,KAAKO,IAAIwF,GAAUrG,KAAKM,KAAKO,IAAIyF,GACtCtG,KAAKM,KAAKO,IAAIyF,GAAUI,EACxBL,MAMD,YAAApB,QAAP,WACIjF,KAAKM,KAAKO,IAAMb,KAAKM,KAAKO,IAAIJ,MAAK,SAACgB,EAAGC,GAAM,OAAAA,EAAID,MAuCzD,EA/EA,GAAa,EAAAoE,e,sGCAb,iBAUI,WAAYE,EAAsBpF,EAAqBgG,GACnD3G,KAAKa,IAAMkF,EACX/F,KAAK4G,SAAW,EAChB5G,KAAK6G,cAAgB,EACrB7G,KAAK8G,YAAc,EACnB9G,KAAK+G,MAAQ,EAEb/G,KAAK2G,MAAQA,EAEb3G,KAAKW,OAASA,EAkHtB,OA9GW,YAAAgB,QAAP,SAAeF,EAAWC,GAYtB,OAXA1B,KAAK8G,cACL9G,KAAKW,OAAOO,gBAAgBO,EAAG,WAC/BzB,KAAKW,OAAOO,gBAAgBQ,EAAG,WAC/B1B,KAAKW,OAAOqG,kBAAkBhH,MAC9BA,KAAKW,OAAOW,aACZtB,KAAKW,OAAOW,aAEZtB,KAAKW,OAAOO,gBAAgBO,EAAG,WAC/BzB,KAAKW,OAAOO,gBAAgBQ,EAAG,WAGxB1B,KAAKa,IAAIY,GAAKzB,KAAKa,IAAIa,IAI3B,YAAAF,KAAP,SAAYC,EAAWC,GACnB1B,KAAK+G,QACL/G,KAAKW,OAAOO,gBAAgBO,EAAG,QAC/BzB,KAAKW,OAAOO,gBAAgBQ,EAAG,QAC/B1B,KAAKW,OAAOqG,kBAAkBhH,MAC9BA,KAAKW,OAAOW,aAEZ,IAAI2F,EAAOjH,KAAKa,IAAIY,GAChByF,EAAOlH,KAAKa,IAAIa,GACpB1B,KAAKa,IAAIY,GAAKyF,EACdlH,KAAKa,IAAIa,GAAKuF,EAEdjH,KAAKW,OAAOwG,mBAAmBnH,MAC/BA,KAAKW,OAAOO,gBAAgBO,EAAG,QAC/BzB,KAAKW,OAAOO,gBAAgBQ,EAAG,QAC/B1B,KAAKW,OAAOW,aAEZtB,KAAKW,OAAOO,gBAAgBO,EAAG,WAC/BzB,KAAKW,OAAOO,gBAAgBQ,EAAG,YAI5B,YAAA9C,IAAP,SAAWiD,GASP,OARA7B,KAAK4G,WAEL5G,KAAKW,OAAOqG,kBAAkBhH,MACzBA,KAAK2G,QACN3G,KAAKW,OAAOG,iBAAiBe,GAC7B7B,KAAKW,OAAOO,gBAAgBW,EAAI,OAChC7B,KAAKW,OAAOW,cAETtB,KAAKa,IAAIgB,IAIb,YAAAD,IAAP,SAAWC,EAAY7C,GACnBgB,KAAKa,IAAIgB,GAAM7C,EAEfgB,KAAK6G,gBACL7G,KAAKW,OAAOqG,kBAAkBhH,MAEzBA,KAAK2G,QACN3G,KAAKW,OAAOwG,mBAAmBnH,MAC/BA,KAAKW,OAAOG,iBAAiBe,GAC7B7B,KAAKW,OAAOO,gBAAgBW,EAAI,OAChC7B,KAAKW,OAAOW,aACZtB,KAAKW,OAAOO,gBAAgBW,EAAI,aAKjC,YAAA0B,KAAP,SAAYvE,GACRgB,KAAKa,IAAI0C,KAAKvE,GAEdgB,KAAK6G,gBACL7G,KAAKW,OAAOqG,kBAAkBhH,MAC9BA,KAAKW,OAAOwG,mBAAmBnH,OAI5B,YAAAoH,IAAP,WACIpH,KAAKa,IAAIuG,MAETpH,KAAK6G,gBACL7G,KAAKW,OAAOwG,mBAAmBnH,OAG5B,YAAAmB,UAAP,WACI,OAAOnB,KAAKa,IAAI+C,QAGb,YAAArD,QAAP,WACIP,KAAKW,OAAO0G,WAAWrH,KAAK4G,SAAU5G,KAAK6G,eAC3C7G,KAAKW,OAAO2G,aAAatH,KAAKa,MAG3B,YAAAL,cAAP,WACIR,KAAK4G,SAAW,EAChB5G,KAAK6G,cAAgB,EACrB7G,KAAK+G,MAAQ,EACb/G,KAAK8G,YAAc,GAIhB,YAAAS,SAAP,WACI,IAAIjE,EAAc,IAClBA,GAAOkE,OAAOxH,KAAKa,IAAI,IACvB,IAAK,IAAI9C,EAAI,EAAGA,EAAIiC,KAAKa,IAAI+C,OAAQ7F,IACjCuF,GAAO,KACPA,GAAOkE,OAAOzJ,GAGlB,OADAuF,GAAO,KAGf,EArIA,GAAa,EAAA2C,kB,ucCHb,IAKA,cACI,WAAYlG,GAAZ,MACI,YAAMA,IAAY,K,OAClB,EAAKG,eAAiB,QACtB,EAAKC,qBAAuB,QAG5B,EAAKC,YAAc,wN,EAiE3B,OAxE+B,OAU3B,YAAAK,KAAA,WAEI,OADAT,KAAKyE,UAAU,EAAGzE,KAAKmB,YAAc,GAC9BnB,KAAKC,MAGhB,YAAAwE,UAAA,SAAUhB,EAAeC,GACrB,GAAID,EAAQC,EAAK,CACb,IAAI+D,EAAclB,KAAKC,OAAO/C,EAAQC,GAAO,GAE7C1D,KAAKyE,UAAUhB,EAAOgE,GACtBzH,KAAKyE,UAAUgD,EAAM,EAAG/D,GAExB1D,KAAK0H,MAAMjE,EAAOgE,EAAK/D,KAI/B,YAAAgE,MAAA,SAAMjE,EAAegE,EAAa/D,GAO9B,IAJA,IAAIiE,EAAuB3H,KAAKC,KAAKmG,oBACjCwB,EAAwB5H,KAAKC,KAAKmG,oBAG7BrI,EAAY0F,EAAO1F,GAAK0J,EAAK1J,IAClC4J,EAAKpE,KAAKvD,KAAKpB,IAAIb,IAGvB,IAASA,EAAY0J,EAAM,EAAG1J,GAAK2F,EAAK3F,IACpC6J,EAAMrE,KAAKvD,KAAKpB,IAAIb,IAQxB,IAJA,IAAIC,EAAY,EACZa,EAAY,EACZgJ,EAAYpE,EAETzF,EAAIyF,GAASgE,GAAO5I,EAAI4I,EAAM,GAAK/D,GAAK,CAC3C,IAAIoE,EAAoBH,EAAK/I,IAAIZ,GAC7B+J,EAAqBH,EAAMhJ,IAAIC,GAC/BiJ,GAAaC,GACb/H,KAAK4B,IAAIiG,EAAGC,GACZ9J,MAEAgC,KAAK4B,IAAIiG,EAAGE,GACZlJ,KAEJgJ,IAGJ,KAAO7J,EAAIyF,GAASgE,GAChBzH,KAAK4B,IAAIiG,EAAGF,EAAK/I,IAAIZ,IACrBA,IACA6J,IAGJ,KAAOhJ,EAAI4I,EAAM,GAAK/D,GAClB1D,KAAK4B,IAAIiG,EAAGD,EAAMhJ,IAAIC,IACtBA,IACAgJ,KAIZ,EAxEA,CALA,KAK+B/F,SAAlB,EAAA4C,a,2cCLb,IAIA,cACI,WAAY3E,GAAZ,MACI,YAAMA,IAAY,K,OAClB,EAAKG,eAAiB,MACtB,EAAKC,qBAAuB,MAE5B,EAAKC,YAAc,iI,EAsB3B,OA5BmC,OAU/B,YAAAK,KAAA,WACI,IAAK,IAAI1C,EAAI,EAAGA,EAAIiC,KAAKmB,YAAapD,IAAK,CAIvC,IAFA,IAAIiK,EAAIjK,EAAI,EAELiK,GAAK,GAAKhI,KAAK2B,QAAQ5D,EAAGiK,IAC7BA,IAIJ,IAFAA,IAEOA,EAAIjK,GACPiC,KAAKwB,KAAKwG,EAAGjK,GACbiK,IAGR,OAAOhI,KAAKC,MAGpB,EA5BA,CAJA,KAImC6B,SAAtB,EAAAsC,iB,idCJb,IAGA,cACC,WAAYrE,G,OACX,YAAMA,IAAY,KAiCpB,OAnCyC,OASxC,YAAAU,KAAA,WACC,IAAK,IAAIiD,EAAM,EAAGA,EAAM1D,KAAKmB,YAAauC,IAAO,CAMhD,IAHA,IAAI1F,EAAY,EACZa,EAAY6E,EACZvF,EAAYoI,KAAK0B,MAAMvE,EAAM,GAC1B1F,EAAIa,GAEV,GADAV,EAAIoI,KAAK0B,OAAOjK,EAAIa,GAAK,GACrBmB,KAAK2B,QAAQ+B,EAAKvF,GACrBU,EAAIV,EAAI,MACF,KAAI6B,KAAK2B,QAAQxD,EAAGuF,GAG1B,MAFA1F,EAAIG,EAAI,EAMV,KAAOA,EAAIuF,GACV1D,KAAKwB,KAAKrD,EAAGuF,GACbvF,IAGF,OAAO6B,KAAKC,MAGd,EAnCA,CAHA,KAGyC6B,SAA5B,EAAAwC,uB,scCHb,WACA,QAIA,cACI,WAAYvE,GAAZ,MACI,YAAMA,IAAY,K,OAClB,EAAKG,eAAiB,QACtB,EAAKC,qBAAuB,QAG5B,EAAKC,YAAc,yV,EAqC3B,OA5C8B,OAU1B,YAAAK,KAAA,WAGI,IAFA,IAAIjB,EAAYQ,KAAKmB,YAEZpD,EAAIwI,KAAK0B,MAAMzI,EAAI,GAAK,EAAGzB,GAAK,EAAGA,IACxCiC,KAAKkI,WAAWnK,EAAGyB,GAGvB,IAASzB,EAAIyB,EAAI,EAAGzB,EAAI,EAAGA,IACvBiC,KAAKwB,KAAK,EAAGzD,GACbiC,KAAKkI,WAAW,EAAGnK,GAGvB,OAAOiC,KAAKC,MAGhB,YAAAiI,WAAA,SAAWC,EAAczE,GACrB,IAAI0E,EAAUD,EACVR,EAAO,EAAAU,SAASC,eAAeH,GAC/BP,EAAQ,EAAAS,SAASE,gBAAgBJ,GAGjCR,EAAOjE,GAAO1D,KAAK2B,QAAQyG,EAAST,KACpCS,EAAUT,GAGVC,EAAQlE,GAAO1D,KAAK2B,QAAQyG,EAASR,KACrCQ,EAAUR,GAGVQ,GAAWD,IACXnI,KAAKwB,KAAK4G,EAASD,GACnBnI,KAAKkI,WAAWE,EAAS1E,KAGrC,EA5CA,CAA8B,EAAA5B,SAAjB,EAAA0C,Y,gGCHb,+BAiBA,OAfW,EAAAgE,QAAP,SAAe3H,GACX,OAAOA,EAAIjC,IAAI,IAGZ,EAAA0J,eAAP,SAAsBzG,GAClB,OAAY,EAALA,GAGJ,EAAA0G,gBAAP,SAAuB1G,GACnB,OAAY,EAALA,EAAS,GAGb,EAAA4G,aAAP,SAAoB5G,GAChB,OAAO0E,KAAK0B,MAAMpG,EAAK,EAAI,IAEnC,EAjBA,GAAa,EAAAwG,Y,mGCDb,WACA,OAGA,aAqBC,WAAYK,EAA4BC,EAAwBC,EAA2BC,GAA3F,WAdA,KAAAC,eAAyB,EACzB,KAAAC,YAAsB,EAEtB,KAAAC,WAAqB,EACrB,KAAAC,YAAsB,EACtB,KAAAC,aAAuB,EACvB,KAAAC,cAAwB,EAIxB,KAAAC,cAAwB,GAExB,KAAAC,SAAmB,EAGlBrJ,KAAK0I,cAAgBA,EACrB1I,KAAK2I,UAAYA,EACjB3I,KAAK4I,aAAeA,EACpB5I,KAAK6I,YAAcA,EAEnB7I,KAAKsJ,YAAc,GAEnBV,EAAanD,aAAa,SAAU+B,OAAOxH,KAAKoJ,gBAChDG,OAAOzD,iBAAiB,UAAU,WAAQ,EAAK0D,mBAAmB,GA4LpE,OAzLQ,YAAAxD,aAAP,SAAoBpC,EAAgBD,GACnC3D,KAAK8I,cAAgBlF,EACrB5D,KAAK+I,WAAapF,EAClB3D,KAAKwJ,iBAGE,YAAAA,cAAR,WAECxJ,KAAKkJ,YAAc3C,KAAK0B,MAAM,EAAAlH,OAAO6B,mBAAqBZ,SAASC,gBAAgBwH,aACnFzJ,KAAKmJ,aAAe5C,KAAK0B,MAAM,EAAAlH,OAAO8B,oBAAsBb,SAASC,gBAAgByH,cAGrF1J,KAAKgJ,UAAYzC,KAAK0B,MAAMjI,KAAKkJ,YAAclJ,KAAK8I,eACpD9I,KAAKiJ,WAAa1C,KAAK0B,MAAMjI,KAAKmJ,aAAenJ,KAAK+I,YAGtD/G,SAASC,gBAAgBC,MAAMC,YAAY,cAAeqF,OAAOxH,KAAKgJ,WAAa,MACnFhH,SAASC,gBAAgBC,MAAMC,YAAY,eAAgBqF,OAAOxH,KAAKiJ,YAAc,MACrFjH,SAASC,gBAAgBC,MAAMC,YAAY,iBAAkBqF,OAAOxH,KAAKmJ,cAAgB,MAGzFnJ,KAAK2I,UAAUlD,aAAa,QAAYzF,KAAKkJ,YAAW,MACxDlJ,KAAK2I,UAAUlD,aAAa,SAAazF,KAAKmJ,aAAY,MAC1DnJ,KAAK0I,cAAcjD,aAAa,QAAYzF,KAAKkJ,YAAW,MAC5DlJ,KAAK4I,aAAanD,aAAa,QAAYzF,KAAKkJ,YAAW,OAIrD,YAAA7B,WAAP,SAAkBN,EAAeD,GAChC9G,KAAK0I,cAAcrD,UAAY,8CACU,EAAAtE,OAAOC,OAAOoB,UAAS,4BAC3C2E,EAAK,wCAELD,EAAW,qBAI1B,YAAAQ,aAAP,SAAoBzG,GAEnB,IADA,IAAI8I,EAAuB,GAClB5L,EAAI,EAAGA,EAAI8C,EAAI+C,OAAQ7F,IAC/B4L,GAAgB,kFAGY9I,EAAI9C,GAAE,mDACXA,EAAC,wEACqB8C,EAAI9C,GAAE,uGAsBpDiC,KAAK2I,UAAUtD,UAAYsE,GAGpB,YAAAC,SAAR,SAAiB/H,EAAYgI,GACpB7J,KAAK2I,UAAUmB,SAASjI,GAC9B4D,aAAa,QAAS,QAAQoE,IAGzB,YAAAE,SAAR,SAAiBlI,EAAYmI,GACpBhK,KAAK2I,UAAUmB,SAASjI,GAC9B4D,aAAa,QAASuE,IAGjB,YAAAC,UAAR,SAAkBpI,GACjB,IAAIqI,EAASlK,KAAKoJ,cACde,EAAQnK,KAAKgJ,UACboB,EAAkBvI,EAAKsI,EAG3BnK,KAAK4I,aAAavD,UAAY,2CAElB+E,EAAO,IAAIF,EAAM,kBACjBE,EAAUD,EAAQ,GAAC,oBACnBC,EAAUD,GAAK,IAAID,EAAM,4BAChB,EAAAnJ,OAAOC,OAAO2B,YAAW,yBAG9C3C,KAAKqJ,SAAWxH,GAGV,YAAAmF,kBAAP,SAAyB1G,GACxBN,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWC,QACjBgE,MAAOzG,EAAKyG,MACZD,YAAaxG,EAAKwG,eAIb,YAAAK,mBAAP,SAA0B7G,GACpBA,EAAKqG,OACT3G,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWE,SACjBnC,IAAK,EAAAgD,KAAKR,OAAO/C,EAAKO,QAKlB,YAAAC,iBAAP,SAAwBe,EAAYyI,GACnCtK,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWG,OACjBsH,MAAO1I,EACPyI,eAAgBA,KAIX,YAAAE,gBAAP,SAAuB3I,EAAYgI,GAClC7J,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWI,MACjBqH,MAAO1I,EACP4I,SAAUZ,KAIL,YAAA3I,gBAAP,SAAuBW,EAAYmI,GAClChK,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWM,MACjBmH,MAAO1I,EACP6I,aAAcV,KAIT,YAAA1I,WAAP,WACCtB,KAAKsJ,YAAY/F,KAAK,CACrB8G,KAAM,EAAAvH,WAAWK,UAKZ,YAAA5C,QAAP,WACCP,KAAK2K,eAIE,YAAAA,YAAR,sBACKC,EAAS5K,KAAKsJ,YAAYuB,QAC9B,GAAcC,MAAVF,EACH,OAAQA,EAAOP,MAEd,KAAK,EAAAvH,WAAWC,QACX6H,EAAOjE,OAGV3G,KAAKqH,WAAWuD,EAAO7D,MAAO6D,EAAO9D,aAEtC9G,KAAK2K,cACL,MACD,KAAK,EAAA7H,WAAWE,SACfhD,KAAKsH,aAAasD,EAAO/J,KACzBb,KAAK2K,cACL,MACD,KAAK,EAAA7H,WAAWG,OACfjD,KAAKiK,UAAUW,EAAOL,OACtBvK,KAAK2K,cACL,MACD,KAAK,EAAA7H,WAAWI,MACflD,KAAK4J,SAASgB,EAAOL,MAAOK,EAAOH,UACnCzK,KAAK2K,cACL,MACD,KAAK,EAAA7H,WAAWM,MACfpD,KAAK+J,SAASa,EAAOL,MAAOK,EAAOF,cACnC1K,KAAK2K,cACL,MACD,KAAK,EAAA7H,WAAWK,OACfmC,YAAW,WAAQ,EAAKqF,gBAAiB,IAAMI,WAAW/K,KAAK6I,YAAY7J,UAKhF,EA1NA,GAAa,EAAA4G,e,2cCLb,IAIA,cACI,WAAY7F,GAAZ,MACI,YAAMA,IAAY,K,OAClB,EAAKG,eAAiB,IACtB,EAAKC,qBAAuB,MAC5B,EAAKC,YAAc,sJ,EAgB3B,OArBmC,OAQ/B,YAAAK,KAAA,WACI,IAAK,IAAI4F,EAAS,EAAGA,EAASrG,KAAKmB,YAAakF,IAAU,CAEtD,IADA,IAAI2E,EAAQ3E,EACHtI,EAAIsI,EAAQtI,EAAIiC,KAAKmB,YAAapD,IACnCiC,KAAK2B,QAAQ5D,EAAGiN,KAChBA,EAAQjN,GAGhBiC,KAAKwB,KAAKwJ,EAAO3E,GAErB,OAAOrG,KAAKC,MAGpB,EArBA,CAJA,KAImC6B,SAAtB,EAAAoC,iB,wcCJb,IAIA,cACC,WAAYnE,GAAZ,MACC,YAAMA,IAAY,K,OAClB,EAAKG,eAAiB,MACtB,EAAKC,qBAAuB,MAE5B,EAAKC,YAAc,2F,EAmBrB,OAzBgC,OAS/B,YAAAK,KAAA,WAGC,IAFA,IAAIwK,GAAkB,EAClBC,EAAa,GACTD,GAAQ,CACfA,GAAS,EACT,IAAK,IAAIlN,EAAI,EAAGA,EAAIiC,KAAKmB,YAAc,EAAI+J,EAAYnN,IACjDiC,KAAK2B,QAAQ5D,EAAGA,EAAI,KACxBiC,KAAKwB,KAAKzD,EAAGA,EAAI,GACjBkN,GAAS,GAGXC,IAED,OAAOlL,KAAKC,MAGd,EAzBA,CAJA,KAIgC6B,SAAnB,EAAA8C","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","import { SortingTask } from \"./SortingTask\";\r\nimport { Config } from \"../Utility/Config\";\r\n\r\nexport abstract class ASorter {\r\n\ttask: SortingTask;\r\n\tswapComplexity: string;\r\n\tcomparisonComplexity: string;\r\n\tdescription: string;\r\n\r\n\tconstructor(sortingTask: SortingTask) {\r\n\t\tthis.task = sortingTask;\r\n\t\tthis.swapComplexity = \"\";\r\n\t\tthis.comparisonComplexity = \"\";\r\n\t\tthis.description = \"\";\r\n\t}\r\n\r\n\tabstract sort(): SortingTask;\r\n\r\n\tpublic execute(): void {\r\n\t\tthis.task.tArr.display();\r\n\t\tthis.task.tArr.resetCounters();\r\n\t\tthis.sort();\r\n\t\tthis.verify();\r\n\t\tthis.task.drawer.display();\r\n\t}\r\n\r\n\t/** independent checker to verify the sort has completed correctly */\r\n\tpublic verify(): boolean {\r\n\t\tlet prev: number = this.task.tArr.arr[0];\r\n\t\tthis.task.drawer.pushReaderUpdate(0, Config.colors.barCorrectColor);\r\n\t\tthis.task.drawer.pushClassUpdate(0, 'correct');\r\n\t\tfor (var i = 1; i < this.task.tArr.getLength(); i++) {\r\n\t\t\tlet val: number = this.task.tArr.arr[i];\r\n\t\t\tif (prev <= val) {\r\n\t\t\t\tthis.task.drawer.pushReaderUpdate(i, Config.colors.barCheckHighlight); // display effect of moving head without modifying counters\r\n\t\t\t\tthis.task.drawer.pushClassUpdate(i, 'correct');\r\n\t\t\t\tthis.task.drawer.pushBuffer();\r\n\t\t\t} else {\r\n\t\t\t\tthis.task.drawer.pushReaderUpdate(i, Config.colors.barIncorrecColor);\r\n\t\t\t\tthis.task.drawer.pushClassUpdate(i, 'incorrect');\r\n\t\t\t\tthis.task.drawer.pushBuffer();\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\tprev = val;\r\n\t\t}\r\n\t\treturn true\r\n\t}\r\n\r\n\tpublic swap(a: number, b: number): void {\r\n\t\tthis.task.tArr.swap(a, b);\r\n\t}\r\n\r\n\tpublic compare(a: number, b: number): boolean {\r\n\t\treturn this.task.tArr.compare(a, b);\r\n\t}\r\n\r\n\tpublic getLength(): number{\r\n\t\treturn this.task.tArr.getLength();\r\n\t}\r\n\r\n\tpublic set(ix: number, value: number): void {\r\n\t\tthis.task.tArr.set(ix, value);\r\n\t}\r\n\r\n\tpublic get(ix: number): number {\r\n\t\treturn this.task.tArr.get(ix);\r\n\t}\r\n}\r\n\r\n","export class Config {\r\n    private static white: string = \"#E2E8F0\";\r\n\r\n    static colors: any = {\r\n        barDefaultColor: Config.white, // default color for array element repersentations\r\n        barSwapColor: \"#37D7FF\", // color durring element swaps\r\n        barCompareColor: \"#D787FF\", // color durring element swaps\r\n        barSetColor: \"#37D7FF\", // color durring element value retreival\r\n        barGetColor: \"#D787FF\", // color durring element value modification\r\n        barCorrectColor: \"#9AE6B4\", // color for correctly placed element in validation\r\n        barIncorrecColor: \"#FEB2B2\", // color for incorrectly placed element in validation\r\n\r\n        readerColor: \"#FFA564\", // color of the moving head triangle\r\n\r\n        textColor: Config.white,\r\n    };\r\n\r\n    static canvasWidthPercent = 0.5;\r\n    static canvasHeightPercent = 0.6;\r\n\r\n    static init() {\r\n        document.documentElement.style.setProperty('--textColor', Config.colors.textColor);\r\n        document.documentElement.style.setProperty('--barDefaultColor', Config.colors.barDefaultColor);\r\n        document.documentElement.style.setProperty('--barSwapColor', Config.colors.barSwapColor);\r\n        document.documentElement.style.setProperty('--barCompareColor', Config.colors.barCompareColor);\r\n        document.documentElement.style.setProperty('--barSetColor', Config.colors.barSwapColor);\r\n        document.documentElement.style.setProperty('--barGetColor', Config.colors.barCompareColor);\r\n        document.documentElement.style.setProperty('--barCorrectColor', Config.colors.barCorrectColor);\r\n        document.documentElement.style.setProperty('--barIncorrecColor', Config.colors.barIncorrecColor);\r\n    }\r\n} ","export const UpdateType = {\r\n    COUNTER: 0,\r\n    POSITION: 1,\r\n    READER: 2,\r\n    COLOR: 3,\r\n    BUFFER: 4,\r\n    CLASS: 5,\r\n}\r\nexport class Util {\r\n\r\n\r\n    static copyOf(arr: number[]): number[] {\r\n        let out: number[] = [];\r\n        for (const n of arr) {\r\n            out.push(n);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    static subarray(arr: number[], start: number, end: number) {\r\n        let out: number[] = [];\r\n        for (var i = start; i <= end; i++) {\r\n            out.push(arr[i]);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    static max(arr: number[]): number {\r\n        let max: number = arr[0];\r\n        for (var i = 0; i < arr.length; i++) {\r\n            if (arr[i] > max) {\r\n                max = arr[i];\r\n            }\r\n        }\r\n        return max;\r\n    }\r\n}","import { SortingTask } from \"./framework/SortingTask\";\r\nimport { ASorter } from \"./framework/ASorter\";\r\nimport { MergeSort } from \"./SortingAlgorithms/MergeSort\";\r\nimport { InsertionSort } from \"./SortingAlgorithms/InsertionSort\";\r\nimport { BinaryInsertionSort } from \"./SortingAlgorithms/BinaryInsertionSort\";\r\nimport { HeapSort } from \"./SortingAlgorithms/HeapSort\";\r\nimport { ArrayDrawer } from \"./framework/ArrayDrawer\" ;\r\nimport { SelectionSort } from \"./SortingAlgorithms/SelectionSort\";\r\nimport { BubbleSort } from \"./SortingAlgorithms/BubbleSort\";\r\nimport { Config } from \"./Utility/Config\";\r\n\r\nlet dropdown: HTMLSelectElement;\r\nlet task: SortingTask;\r\nlet drawer: ArrayDrawer;\r\nlet swapLegend: HTMLElement;\r\nvar sorts: { [id: string]: any } = {\r\n    selectionSort: function (sortingTask: SortingTask): SelectionSort {\r\n        return new SelectionSort(sortingTask);\r\n    },\r\n\tinsertionSort: function (sortingTask: SortingTask): InsertionSort {\r\n\t\treturn new InsertionSort(sortingTask);\r\n\t},\r\n\tbinaryInsertionSort: function (sortingTask: SortingTask): BinaryInsertionSort {\r\n\t\treturn new BinaryInsertionSort(sortingTask);\r\n\t},\r\n    heapSort: function (sortingTask: SortingTask): HeapSort {\r\n        return new HeapSort(sortingTask);\r\n    },\r\n\tmergeSort: function (sortingTask: SortingTask): MergeSort {\r\n\t\treturn new MergeSort(sortingTask);\r\n\t},\r\n\tbubbleSort: function (sortingTask: SortingTask): BubbleSort {\r\n\t\treturn new BubbleSort(sortingTask);\r\n\t},\r\n};\r\n\r\nfunction init() {\r\n    // load css variables from config\r\n    Config.init();\r\n    document.getElementById(\"canvas\")?.setAttribute(\"style\", `width:${100 * Config.canvasWidthPercent}vw`);\r\n\r\n    // populate dropdown with sort options\r\n    let htmlString: string = \"\";\r\n    for (const sortName in sorts) {\r\n        htmlString += `<option value='${sortName}'>${sortName}</option>`;\r\n    }\r\n    dropdown = document.getElementById(\r\n        \"algoSelect\"\r\n    )! as HTMLSelectElement;\r\n    dropdown.innerHTML = htmlString;\r\n\r\n    // start swap legend\r\n    swapLegend = document.getElementById(\"swapLegend\")!;\r\n    swapA();\r\n\r\n    // create arr\r\n    var arr: number[] = [];\r\n    for (var i = 1; i <= 32; i++) {\r\n        arr.push(i);\r\n    }\r\n\r\n    // build drawer\r\n    drawer = new ArrayDrawer(\r\n        document.getElementById(\"counter\")!,\r\n        document.getElementById(\"position\")!,\r\n        document.getElementById(\"reader\")!,\r\n        (document.getElementById(\"delaySlider\")! as HTMLInputElement),\r\n    );\r\n\r\n    task = new SortingTask(arr, drawer);\r\n    task.randomize();\r\n    task.tArr.display();\r\n\r\n    // bind commands to buttons\r\n    document.getElementById(\"startButton\")!.addEventListener(\"click\", runSort);\r\n    document.getElementById(\"randomizeButton\")!.addEventListener(\"click\", randomizeTask);\r\n    document.getElementById(\"reverseButton\")!.addEventListener(\"click\", reverseTask);\r\n\r\n}\r\n\r\nfunction runSort(): void {\r\n    generateSorter(task).execute();\r\n}\r\n\r\nfunction reverseTask(): void {\r\n    task.reverse();\r\n    task.tArr.display();\r\n}\r\n\r\nfunction randomizeTask(): void {\r\n    task.randomize();\r\n    task.tArr.display();\r\n}\r\n\r\nfunction generateSorter(task: SortingTask): ASorter {\r\n    let selectedSort: string = dropdown.value;\r\n    var sorter: ASorter = sorts[selectedSort](task); // TODO: make a register, on click cancel the sort\r\n    return sorter;\r\n}\r\n\r\ninit();\r\n// // docum\r\n// //\r\n// // document!.getElementById('root')!.textContent = \"hello\"\r\n\r\n// // var sorts = {\r\n// //     mergeSort: function (sortingTask): SortingTask {\r\n// //         sortingTask.aux.r = [];\r\n// //         sortingTask.aux.l = [];\r\n\r\n// //         for (var i = 0; i < sortingTask.arr.length / 2; i++) {\r\n\r\n// //         }\r\n\r\n// //         return sortingTask;\r\n// //     },\r\n// // };\r\n\r\n\r\nfunction swapA() {\r\n    swapLegend.innerHTML = `<rect style=\"height: calc(2 * var(--heightUnit)); x: 0px; y: calc(2 * var(--heightUnit));\" class=\"swap\"></rect>\r\n    <rect style=\"height: calc(4 * var(--heightUnit)); x: calc(1.5 * var(--widthUnit)); y: calc(0);\" class=\"swap\"></rect>`;\r\n    setTimeout(swapB, 1000);\r\n}\r\n\r\nfunction swapB() {\r\n    swapLegend.innerHTML = `<rect style=\"height: calc(2 * var(--heightUnit)); x: calc(1.5 * var(--widthUnit)); y: calc(2 * var(--heightUnit));\" class=\"swap\"></rect>\r\n    <rect style=\"height: calc(4 * var(--heightUnit)); x: 0px; y: calc(0);\" class=\"swap\"></rect>`;\r\n    setTimeout(swapA, 1000);\r\n}","import { TrackableArray } from \"./TrackableArray\";\r\nimport { ArrayDrawer } from \"./ArrayDrawer\";\r\nimport { Util } from \"../Utility/Util\";\r\nexport class SortingTask {\r\n    tArr: TrackableArray;\r\n    auxiliaryArrs: Array<TrackableArray>;\r\n    // TODO: add constant space register storage with separate display\r\n    drawer: ArrayDrawer;\r\n\r\n    // swaps: number;\r\n    // comparisons: number;\r\n\r\n    constructor(array: Array<number>, drawer: ArrayDrawer) {\r\n        this.drawer = drawer;\r\n        this.drawer.setArrayData(array.length, Util.max(array));\r\n\r\n        this.tArr = new TrackableArray(array, this.drawer, false);\r\n        this.auxiliaryArrs = new Array<TrackableArray>();\r\n    }\r\n\r\n    public generateNewAuxArr(): TrackableArray {\r\n        this.auxiliaryArrs.push(new TrackableArray([], this.drawer, true));\r\n        return this.auxiliaryArrs[this.auxiliaryArrs.length - 1];\r\n    }\r\n\r\n    // getData(): any { };\r\n\r\n    /** sets array to randomized order */\r\n    public randomize(): void {\r\n        let cutoff: number = 0;\r\n\r\n        while (cutoff < this.tArr.arr.length) {\r\n            let randIx: number = cutoff + Math.trunc(Math.random() * (this.tArr.arr.length - cutoff));\r\n            let temp: number = this.tArr.arr[cutoff];\r\n            this.tArr.arr[cutoff] = this.tArr.arr[randIx];\r\n            this.tArr.arr[randIx] = temp;\r\n            cutoff++\r\n        }\r\n\r\n    }\r\n\r\n    /** sets array in reversed of sorted order */\r\n    public reverse(): void {\r\n        this.tArr.arr = this.tArr.arr.sort((a, b) => b - a);\r\n    }\r\n\r\n    // updateCanvas(): void {\r\n    //     // this.canvas.innerHTML = \"\";\r\n    //     // this.updatePositions();\r\n    //     // this.updateCounters();\r\n    //     this.canvas.innerHTML += \".\\n\"\r\n    // }\r\n\r\n    // updateCounters(): void {\r\n\r\n    //     let auxAcsesses: number = 0;\r\n    //     let auxModifications: number = 0;\r\n\r\n    //     for (const arr of this.auxiliaryArrs) {\r\n    //         auxAcsesses += arr.acsesses;\r\n    //         auxModifications += arr.modifications;\r\n    //     }\r\n\r\n    //     this.canvas.innerHTML += `<text x=\"20\" y=\"35\">\r\n    //     Acsesses     : ${this.tArr.acsesses}\r\n    //     Modifications: ${this.tArr.modifications}\r\n    //     Aux Acs's    : ${auxAcsesses}\r\n    //     Aux Mod's    : ${auxModifications}  \r\n    //     </text>`\r\n    // };\r\n\r\n    // updatePositions(): void {\r\n    //     for (var i = 0; i < this.tArr.arr.length; i++) {\r\n    //         let height: number = this.tArr.arr[i] * this.cHeightUnit;\r\n    //         this.canvas.innerHTML += `<rect\r\n    //         width=\"${this.cWidthUnit}\"\r\n    //         height=\"${height}\"\r\n    //         x=\"${i * this.cWidthUnit}\"\r\n    //         y=\"${Number(this.canvas.getAttribute(\"height\")) - height}\"></rect>`;\r\n    //     }\r\n\r\n    // };\r\n}","import { ArrayDrawer } from \"./ArrayDrawer\";\r\nimport { Config } from \"../Utility/Config\";\r\n\r\nexport class TrackableArray {\r\n\r\n    arr: Array<number>;\r\n    acsesses: number;\r\n    modifications: number;\r\n    comparisons: number;\r\n    swaps: number;\r\n    drawer: ArrayDrawer;\r\n    isAux: boolean; // aux arrs are NOT drawable, primary arrs are, only one drawable arr should be active at a time\r\n\r\n    constructor(array: Array<number>, drawer: ArrayDrawer, isAux: boolean) {\r\n        this.arr = array;\r\n        this.acsesses = 0;\r\n        this.modifications = 0;\r\n        this.comparisons = 0;\r\n        this.swaps = 0;\r\n\r\n        this.isAux = isAux;\r\n\r\n        this.drawer = drawer;\r\n    }\r\n\r\n    /** returns a < b for values at indecies a and b */\r\n    public compare(a: number, b: number) {\r\n        this.comparisons++;\r\n        this.drawer.pushClassUpdate(a, 'compare');\r\n        this.drawer.pushClassUpdate(b, 'compare');\r\n        this.drawer.pushCounterUpdate(this);\r\n        this.drawer.pushBuffer();\r\n        this.drawer.pushBuffer();\r\n\r\n        this.drawer.pushClassUpdate(a, 'default');\r\n        this.drawer.pushClassUpdate(b, 'default');\r\n        // no buffer here because we only want to change colors back when the next update comes along\r\n\r\n        return this.arr[a] < this.arr[b];\r\n    } // todo: make extend Array<number>, MAYBE THATS NOT DESIRABLE because then u have easy acsess to methods that wll not incements counters when called  \r\n\r\n    /** swaps values at indecies a and b */\r\n    public swap(a: number, b: number): void { // added layer of abstraction above normal functions\r\n        this.swaps++;\r\n        this.drawer.pushClassUpdate(a, 'swap');\r\n        this.drawer.pushClassUpdate(b, 'swap');\r\n        this.drawer.pushCounterUpdate(this);\r\n        this.drawer.pushBuffer();\r\n\r\n        let aVal = this.arr[a];\r\n        let bVal = this.arr[b];\r\n        this.arr[a] = bVal;\r\n        this.arr[b] = aVal;\r\n\r\n        this.drawer.pushPositionUpdate(this);\r\n        this.drawer.pushClassUpdate(a, 'swap');\r\n        this.drawer.pushClassUpdate(b, 'swap');\r\n        this.drawer.pushBuffer();\r\n\r\n        this.drawer.pushClassUpdate(a, 'default');\r\n        this.drawer.pushClassUpdate(b, 'default');\r\n    }\r\n\r\n    // returns a value at a given index and updates reader and stats\r\n    public get(ix: number): number {\r\n        this.acsesses++;\r\n\r\n        this.drawer.pushCounterUpdate(this);\r\n        if (!this.isAux) {\r\n            this.drawer.pushReaderUpdate(ix)\r\n            this.drawer.pushClassUpdate(ix, 'get')\r\n            this.drawer.pushBuffer();\r\n        }\r\n        return this.arr[ix];\r\n    }\r\n\r\n    // sets a value at a given index to annother value, updates reader and stats\r\n    public set(ix: number, value: number): void {\r\n        this.arr[ix] = value;\r\n\r\n        this.modifications++;\r\n        this.drawer.pushCounterUpdate(this);\r\n\r\n        if (!this.isAux) {\r\n            this.drawer.pushPositionUpdate(this);\r\n            this.drawer.pushReaderUpdate(ix)\r\n            this.drawer.pushClassUpdate(ix, 'set');\r\n            this.drawer.pushBuffer();\r\n            this.drawer.pushClassUpdate(ix, 'default');\r\n        }\r\n    }\r\n\r\n    /** push value into the end of the arr */\r\n    public push(value: number): void {\r\n        this.arr.push(value);\r\n\r\n        this.modifications++;\r\n        this.drawer.pushCounterUpdate(this);\r\n        this.drawer.pushPositionUpdate(this);\r\n    }\r\n\r\n    /** remove value from end of arr */\r\n    public pop(): void {\r\n        this.arr.pop();\r\n\r\n        this.modifications++;\r\n        this.drawer.pushPositionUpdate(this);\r\n    }\r\n\r\n    public getLength(): number {\r\n        return this.arr.length;\r\n    }\r\n\r\n    public display(): void {\r\n        this.drawer.setCounter(this.acsesses, this.modifications);\r\n        this.drawer.setPositions(this.arr);\r\n    }\r\n\r\n    public resetCounters(): void {\r\n        this.acsesses = 0;\r\n        this.modifications = 0;\r\n        this.swaps = 0;\r\n        this.comparisons = 0;\r\n    }\r\n\r\n    // for debuging purposes\r\n    public toString(): String {\r\n        let out: String = \"[\";\r\n        out += String(this.arr[0]);\r\n        for (var i = 1; i < this.arr.length; i++) {\r\n            out += \", \";\r\n            out += String(i);\r\n        }\r\n        out += \"]\";\r\n        return out;\r\n    }\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { TrackableArray } from \"../framework/TrackableArray\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\nimport { Util } from \"../Utility/Util\";\r\n\r\nexport class MergeSort extends ASorter {\r\n    constructor(sortingTask: SortingTask) {\r\n        super(sortingTask);\r\n        this.swapComplexity = \"nlogn\";\r\n        this.comparisonComplexity = \"nlogn\";\r\n        // TODO: add space complexity\r\n        // in place\r\n        this.description = \"Merge sort is a divide and conquer algorithm that will sort small sub-sections of an array and progressivley merge said sub-sections to yield larger and larger sorted sub-sections until the entire array is sorted.\";\r\n    }\r\n\r\n    sort(): SortingTask {\r\n        this.mergeSort(0, this.getLength() - 1);\r\n        return this.task;\r\n    }\r\n\r\n    mergeSort(start: number, end: number): void { // returns array of indicies\r\n        if (start < end) {\r\n            let mid: number = Math.trunc((start + end) / 2);\r\n\r\n            this.mergeSort(start, mid);\r\n            this.mergeSort(mid + 1, end);\r\n\r\n            this.merge(start, mid, end);\r\n        }\r\n    }\r\n\r\n    merge(start: number, mid: number, end: number): void {\r\n\r\n        // allocate memory to array coppies\r\n        let left: TrackableArray = this.task.generateNewAuxArr();\r\n        let right: TrackableArray = this.task.generateNewAuxArr();\r\n\r\n        // populate coppies\r\n        for (var i: number = start; i <= mid; i++) {\r\n            left.push(this.get(i));\r\n        }\r\n\r\n        for (var i: number = mid + 1; i <= end; i++) {\r\n            right.push(this.get(i));\r\n        }\r\n\r\n        // crawlers\r\n        let l: number = 0; // left goes up to and including mid\r\n        let r: number = 0; // right is everything right of mid\r\n        let k: number = start; // insertion point to main array\r\n\r\n        while (l + start <= mid && r + mid + 1 <= end) {\r\n            let leftValue: number = left.get(l);\r\n            let rightValue: number = right.get(r);\r\n            if (leftValue <= rightValue) {\r\n                this.set(k, leftValue);\r\n                l++;\r\n            } else {\r\n                this.set(k, rightValue);\r\n                r++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (l + start <= mid) {\r\n            this.set(k, left.get(l));\r\n            l++;\r\n            k++;\r\n        }\r\n\r\n        while (r + mid + 1 <= end) {\r\n            this.set(k, right.get(r));\r\n            r++;\r\n            k++;\r\n        }\r\n    }\r\n\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\n\r\n// n^2\r\nexport class InsertionSort extends ASorter {\r\n    constructor(sortingTask: SortingTask) {\r\n        super(sortingTask);\r\n        this.swapComplexity = \"n^2\";\r\n        this.comparisonComplexity = \"n^2\";\r\n        // in place\r\n        this.description = \"Insertion sort will repeatedly search an array for the location a next element belongs in until all elements have been sorted.\";\r\n        // advantages: in base case O(n) compares and 0 swaps when array is already sorted\r\n    }\r\n\r\n    sort(): SortingTask {\r\n        for (var i = 1; i < this.getLength(); i++) {\r\n            // at the start of the loop, arr is sorted up to ix i (exclusive)\r\n            let j = i - 1; \r\n            // we find where to insert i so the arr is sorted up to ix i (inclusive)\r\n            while (j >= 0 && this.compare(i, j)) {\r\n                j--;\r\n            }\r\n            j++;\r\n            // once i's sorted location is found, we need to swap elements back up to shift the array over\r\n            while (j < i) {\r\n                this.swap(j, i);\r\n                j++;\r\n            }\r\n        }\r\n        return this.task;\r\n    }\r\n\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\n\r\nexport class BinaryInsertionSort extends ASorter {\r\n\tconstructor(sortingTask: SortingTask) {\r\n\t\tsuper(sortingTask);\r\n\t\t// this.swapComplexity = \"n^2\";\r\n\t\t// this.comparisonComplexity = \"nlogn\";\r\n\t\t// in place\r\n\t\t// this.description = \"Insertion sort will repeatedly search an array for the location a next element belongs in until all elements have been sorted.\";\r\n\t}\r\n\r\n\tsort(): SortingTask {\r\n\t\tfor (var end = 1; end < this.getLength(); end++) {\r\n\t\t\t// at the start of the loop, arr is sorted up to end (exclusive)\r\n\t\t\t// we find where to insert the next value value (ix = end) in the sorted portion of the arr by using binary search\r\n\t\t\tlet l: number = 0;\r\n\t\t\tlet r: number = end;\r\n\t\t\tlet m: number = Math.floor(end / 2);\r\n\t\t\twhile (l < r) {\r\n\t\t\t\tm = Math.floor((l + r) / 2);\r\n\t\t\t\tif (this.compare(end, m)) { // end < m\r\n\t\t\t\t\tr = m - 1;\r\n\t\t\t\t} else if (this.compare(m, end)) { // end > m\r\n\t\t\t\t\tl = m + 1;\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// once i's sorted location is found, we need to swap elements back up to shift the array over\r\n\t\t\twhile (m < end) {\r\n\t\t\t\tthis.swap(m, end);\r\n\t\t\t\tm++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this.task;\r\n\t}\r\n\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { TreeUtil } from \"../Utility/TreeUtil\";\r\nimport { TrackableArray } from \"../framework/TrackableArray\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\n\r\nexport class HeapSort extends ASorter {\r\n    constructor(sortingTask: SortingTask) {\r\n        super(sortingTask);\r\n        this.swapComplexity = \"nlogn\";\r\n        this.comparisonComplexity = \"nlogn\";\r\n        // TODO: add space complexity\r\n        // in place\r\n        this.description = \"Heap sort is will visualize the unsorted elements of an array as a heap data structure from which it is possible to find the next value of interest in O(1) time. Once the value is found, it is moved into sorted position and the heap is reorganized in O(logn) time to preserve heap structure. This process is repeated until the array is sorted\"; // basically insertion sort but better lol\r\n    }\r\n\r\n    sort(): SortingTask {\r\n        let n: number = this.getLength()\r\n\r\n        for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\r\n            this.maxHeapify(i, n);\r\n        }\r\n\r\n        for (let i = n - 1; i > 0; i--) {\r\n            this.swap(0, i)\r\n            this.maxHeapify(0, i)\r\n        }\r\n\r\n        return this.task;\r\n    }\r\n\r\n    maxHeapify(root: number, end: number): void {\r\n        let largest = root;\r\n        let left = TreeUtil.getLeftChildIx(root);\r\n        let right = TreeUtil.getRightChildIx(root);\r\n\r\n        // if left child exists and is greater than root\r\n        if (left < end && this.compare(largest, left)) {\r\n            largest = left;\r\n        }\r\n\r\n        if (right < end && this.compare(largest, right)) {\r\n            largest = right;\r\n        }\r\n\r\n        if (largest != root) {\r\n            this.swap(largest, root)\r\n            this.maxHeapify(largest, end);\r\n        }\r\n    }\r\n}","import { TrackableArray } from \"../framework/TrackableArray\";\r\n\r\nexport class TreeUtil {\r\n\r\n    static getRoot(arr: TrackableArray): number {\r\n        return arr.get(0);\r\n    }\r\n\r\n    static getLeftChildIx(ix: number) {\r\n        return ix * 2;\r\n    }\r\n\r\n    static getRightChildIx(ix: number) {\r\n        return ix * 2 + 1;\r\n    }\r\n\r\n    static getParrentIx(ix: number) {\r\n        return Math.floor(ix / 2 - 1);\r\n    }\r\n}","import { TrackableArray } from \"./TrackableArray\";\r\nimport { Util, UpdateType } from \"../Utility/Util\";\r\nimport { Config } from \"../Utility/Config\";\r\n\r\n/** visual update schedueler */\r\nexport class ArrayDrawer { // TODO: each sorting tash should have an array drawer that is passed down and can tell aux from primary on method call\r\n\r\n\tcounterCanvas: HTMLElement;\r\n\tposCanvas: HTMLElement;\r\n\treaderCanvas: HTMLElement;\r\n\tdelaySlider: HTMLInputElement;\r\n\r\n\tcurrentLength: number = -1;\r\n\tcurrentMax: number = -1;\r\n\r\n\twidthUnit: number = -1;\r\n\theightUnit: number = -1;\r\n\tcanvasWidth: number = -1;\r\n\tcanvasHeight: number = -1;\r\n\r\n\tupdateStack: any[];\r\n\r\n\tREADER_HEIGHT: number = 15;\r\n\r\n\tlastRead: number = 0;\r\n\r\n\tconstructor(counterCanvas: HTMLElement, posCanvas: HTMLElement, readerCanvas: HTMLElement, delaySlider: HTMLInputElement) {\r\n\t\tthis.counterCanvas = counterCanvas;\r\n\t\tthis.posCanvas = posCanvas;\r\n\t\tthis.readerCanvas = readerCanvas;\r\n\t\tthis.delaySlider = delaySlider;\r\n\r\n\t\tthis.updateStack = [];\r\n\r\n\t\treaderCanvas.setAttribute(\"height\", String(this.READER_HEIGHT));\r\n\t\twindow.addEventListener('resize', () => { this.resizeDisplay() }, true);\r\n\t}\r\n\r\n\tpublic setArrayData(length: number, max: number): void {\r\n\t\tthis.currentLength = length;\r\n\t\tthis.currentMax = max;\r\n\t\tthis.resizeDisplay();\r\n\t}\r\n\r\n\tprivate resizeDisplay(): void {\r\n\t\t// calculate new dimensions\r\n\t\tthis.canvasWidth = Math.floor(Config.canvasWidthPercent * document.documentElement.clientWidth);\r\n\t\tthis.canvasHeight = Math.floor(Config.canvasHeightPercent * document.documentElement.clientHeight);\r\n\r\n\t\t// resize internal width/height units\r\n\t\tthis.widthUnit = Math.floor(this.canvasWidth / this.currentLength);\r\n\t\tthis.heightUnit = Math.floor(this.canvasHeight / this.currentMax);\r\n\r\n\t\t// set css variables\r\n\t\tdocument.documentElement.style.setProperty('--widthUnit', String(this.widthUnit) + \"px\");\r\n\t\tdocument.documentElement.style.setProperty('--heightUnit', String(this.heightUnit) + \"px\");\r\n\t\tdocument.documentElement.style.setProperty('--canvasHeight', String(this.canvasHeight) + \"px\");\r\n\r\n\t\t// resize canvas dimensions\r\n\t\tthis.posCanvas.setAttribute(\"width\", `${this.canvasWidth}px`);\r\n\t\tthis.posCanvas.setAttribute(\"height\", `${this.canvasHeight}px`);\r\n\t\tthis.counterCanvas.setAttribute(\"width\", `${this.canvasWidth}px`);\r\n\t\tthis.readerCanvas.setAttribute(\"width\", `${this.canvasWidth}px`);\r\n\t}\r\n\r\n\r\n\tpublic setCounter(swaps: number, comparisons: number): void {\r\n\t\tthis.counterCanvas.innerHTML = `\r\n        <text x=\"20\" y=\"35\" style=\"color:${Config.colors.textColor}\">\r\n        Swaps      : ${swaps}\r\n        <br>\r\n        Comparisons: ${comparisons}\r\n        </text>`\r\n\t}\r\n\r\n\tpublic setPositions(arr: number[]): void { // todo: fix all array<number> to number<> and the likes\r\n\t\tlet newInnerHTML: string = \"\"\r\n\t\tfor (var i = 0; i < arr.length; i++) {\r\n\t\t\tnewInnerHTML += `\r\n                <rect\r\n                style=\"\r\n                height: calc(${arr[i]} * var(--heightUnit));\r\n                x: calc(${i} * var(--widthUnit));\r\n                y: calc(var(--canvasHeight) - ${arr[i]} * var(--heightUnit));\r\n                \"\r\n                class=\"default\">\r\n                </rect>`;\r\n\t\t\t// newInnerHTML += `\r\n\t\t\t//     <rect\r\n\t\t\t//     height=\"calc(${arr[i]} * var(--heightUnit))\"\r\n\t\t\t//     x=\"calc(${i} * var(--widthUnit))\"\r\n\t\t\t//     y=\"calc(${this.canvasHeight} - ${arr[i]} * var(--heightUnit))\"\r\n\t\t\t//     class=\"default\">\r\n\t\t\t//     </rect>`;\r\n\t\t\t// newInnerHTML += `\r\n\t\t\t//     <rect\r\n\t\t\t//     width=\"${this.widthUnit}vw\"\r\n\t\t\t//     height=\"${height}vh\"\r\n\t\t\t//     x=\"${i * this.widthUnit * (15 / 16)}vw\"\r\n\t\t\t//     y=\"${100 * Config.canvasHeightPercent - height}vh\"\r\n\t\t\t//     class=\"default\">\r\n\t\t\t//     </rect>\r\n\t\t\t// `; // would be nice to figure out how to get styling working by CSS classes such as rect.default, rect.comparing, rect.swaping but need to figure out how to dynamically change colors that way\r\n\r\n\t\t}\r\n\t\tthis.posCanvas.innerHTML = newInnerHTML;\r\n\t}\r\n\r\n\tprivate setColor(ix: number, color: string): void {\r\n\t\tlet x = this.posCanvas.children[ix];\r\n\t\tx.setAttribute(\"style\", `fill:${color}`);\r\n\t}\r\n\r\n\tprivate setClass(ix: number, className: string): void {\r\n\t\tlet x = this.posCanvas.children[ix];\r\n\t\tx.setAttribute(\"class\", className);\r\n\t}\r\n\r\n\tprivate setReader(ix: number): void {\r\n\t\tlet height = this.READER_HEIGHT;\r\n\t\tlet width = this.widthUnit;\r\n\t\tlet xOffset: number = ix * width;\r\n\r\n\t\t// bottom left, top mid, bottom right\r\n\t\tthis.readerCanvas.innerHTML = `<polygon\r\n        points='\r\n            ${xOffset},${height}\r\n            ${xOffset + width / 2},0\r\n            ${xOffset + width},${height}'\r\n        style=\"fill: ${Config.colors.readerColor}\"\r\n        ></polygon>`;\r\n\r\n\t\tthis.lastRead = ix;\r\n\t}\r\n\r\n\tpublic pushCounterUpdate(tArr: TrackableArray): void {\r\n\t\tthis.updateStack.push({\r\n\t\t\ttype: UpdateType.COUNTER,\r\n\t\t\tswaps: tArr.swaps,\r\n\t\t\tcomparisons: tArr.comparisons\r\n\t\t});\r\n\t};\r\n\r\n\tpublic pushPositionUpdate(tArr: TrackableArray): void {\r\n\t\tif (!tArr.isAux) {\r\n\t\t\tthis.updateStack.push({\r\n\t\t\t\ttype: UpdateType.POSITION,\r\n\t\t\t\tarr: Util.copyOf(tArr.arr)\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\tpublic pushReaderUpdate(ix: number, highlightColor?: string): void {\r\n\t\tthis.updateStack.push({\r\n\t\t\ttype: UpdateType.READER,\r\n\t\t\tindex: ix,\r\n\t\t\thighlightColor: highlightColor,\r\n\t\t})\r\n\t}\r\n\r\n\tpublic pushColorUpdate(ix: number, color: string): void {\r\n\t\tthis.updateStack.push({\r\n\t\t\ttype: UpdateType.COLOR,\r\n\t\t\tindex: ix,\r\n\t\t\tnewColor: color\r\n\t\t})\r\n\t}\r\n\r\n\tpublic pushClassUpdate(ix: number, className: string): void {\r\n\t\tthis.updateStack.push({\r\n\t\t\ttype: UpdateType.CLASS,\r\n\t\t\tindex: ix,\r\n\t\t\tnewClassName: className\r\n\t\t})\r\n\t}\r\n\r\n\tpublic pushBuffer(): void {\r\n\t\tthis.updateStack.push({\r\n\t\t\ttype: UpdateType.BUFFER,\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tpublic display(): void {\r\n\t\tthis.displayNext();\r\n\t}\r\n\r\n\t/** recursive loop that uses async to render all pre-calculated changes  */\r\n\tprivate displayNext(): void {\r\n\t\tlet update = this.updateStack.shift(); // FIFO queue\r\n\t\tif (update != undefined) {\r\n\t\t\tswitch (update.type) { // TODO: doing this as dicts is hacky but would be better to do as some type of custom object UpdateClass with several subclasses for each type of update\r\n\t\t\t\t// frame updates are encoded via this UpdateType mechanism earlier, but actual manipulation of elements is executed on runtime\r\n\t\t\t\tcase UpdateType.COUNTER: // update counter values\r\n\t\t\t\t\tif (update.isAux) { // if is is an aux arr\r\n\t\t\t\t\t\t// this.setCounter(0, 0);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.setCounter(update.swaps, update.comparisons);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.displayNext();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase UpdateType.POSITION: // update physical array\r\n\t\t\t\t\tthis.setPositions(update.arr);\r\n\t\t\t\t\tthis.displayNext();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase UpdateType.READER: // update location of reader head\r\n\t\t\t\t\tthis.setReader(update.index);\r\n\t\t\t\t\tthis.displayNext();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase UpdateType.COLOR: // change color of bars\r\n\t\t\t\t\tthis.setColor(update.index, update.newColor);\r\n\t\t\t\t\tthis.displayNext();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase UpdateType.CLASS:\r\n\t\t\t\t\tthis.setClass(update.index, update.newClassName);\r\n\t\t\t\t\tthis.displayNext();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase UpdateType.BUFFER:\r\n\t\t\t\t\tsetTimeout(() => { this.displayNext() }, 256 - parseFloat(this.delaySlider.value)); // when a buffer is hit, wait for a period specified by the slider, then display the next visual updates\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\n\r\n// n^2\r\nexport class SelectionSort extends ASorter {\r\n    constructor(sortingTask: SortingTask) {\r\n        super(sortingTask);\r\n        this.swapComplexity = \"n\";\r\n        this.comparisonComplexity = \"n^2\";\r\n        this.description = \"Selection sort will repeatedly search an array for the next element in order and swap it into place once found until all elements have been sorted.\";\r\n    }\r\n\r\n    sort(): SortingTask {\r\n        for (var cutoff = 0; cutoff < this.getLength(); cutoff++) {\r\n            let minIx = cutoff;\r\n            for (var i = cutoff; i < this.getLength(); i++) {\r\n                if (this.compare(i, minIx)) {\r\n                    minIx = i;\r\n                }\r\n            }\r\n            this.swap(minIx, cutoff);\r\n        }\r\n        return this.task;\r\n    }\r\n\r\n}","import { ASorter } from \"../framework/ASorter\";\r\nimport { SortingTask } from \"../framework/SortingTask\"\r\n\r\n// n^2\r\nexport class BubbleSort extends ASorter {\r\n\tconstructor(sortingTask: SortingTask) {\r\n\t\tsuper(sortingTask);\r\n\t\tthis.swapComplexity = \"n^2\";\r\n\t\tthis.comparisonComplexity = \"n^2\";\r\n\t\t// in place\r\n\t\tthis.description = \"Bubble sort will repeatedly swap misordered pairs of adjacent until the array is sorted.\";\r\n\t}\r\n\r\n\tsort(): SortingTask {\r\n\t\tlet sorted: boolean = false;\r\n\t\tlet iterations = 0;\r\n\t\twhile (!sorted) {\r\n\t\t\tsorted = true;\r\n\t\t\tfor (var i = 0; i < this.getLength() - 1 - iterations; i++) {\r\n\t\t\t\tif (!this.compare(i, i + 1)) {\r\n\t\t\t\t\tthis.swap(i, i + 1);\r\n\t\t\t\t\tsorted = false; // if this condition is ever true, re-run the while loop\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\titerations++;\r\n\t\t}\r\n\t\treturn this.task;\r\n\t}\r\n\r\n}"],"sourceRoot":""}